name: Smart Log Viewer CI/CD

# When to run this workflow
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Jobs to run
jobs:
  # Test and build the Go server
  test-server:
    name: Test Go Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: 'server/go.sum'
        
    - name: Install dependencies
      run: |
        cd server
        go mod download
        
    - name: Run tests
      run: |
        cd server
        go test ./...
        
    - name: Build server
      run: |
        cd server
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o server ./cmd/server
        
  # Test and build the React client
  test-client:
    name: Test React Client
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd client
        npm ci
        
    - name: Run tests
      run: |
        cd client
        npm test
        
    - name: Build client
      run: |
        cd client
        npm run build
        
  # Build and test Docker containers
  test-docker:
    name: Test Docker Builds
    runs-on: ubuntu-latest
    needs: [test-server, test-client]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build server image
      run: |
        cd server
        docker build -t smart-log-viewer-server:test .
        
    - name: Build client image
      run: |
        cd client
        docker build -t smart-log-viewer-client:test .
        
    - name: Test Docker Compose
      run: |
        docker compose -f docker-compose.yml config
        
  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-docker]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: docker compose -f docker-compose.staging.yml up -d
